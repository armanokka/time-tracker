// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/armanokka/test_task_Effective_mobile/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// TasksRepository is an autogenerated mock type for the TasksRepository type
type TasksRepository struct {
	mock.Mock
}

// AddMember provides a mock function with given fields: ctx, taskID, userID
func (_m *TasksRepository) AddMember(ctx context.Context, taskID int64, userID int64) error {
	ret := _m.Called(ctx, taskID, userID)

	if len(ret) == 0 {
		panic("no return value specified for AddMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, taskID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, task
func (_m *TasksRepository) Create(ctx context.Context, task *models.Task) (*models.Task, error) {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Task) (*models.Task, error)); ok {
		return rf(ctx, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Task) *models.Task); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, taskID
func (_m *TasksRepository) Delete(ctx context.Context, taskID int64) error {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMember provides a mock function with given fields: ctx, taskID, userID
func (_m *TasksRepository) DeleteMember(ctx context.Context, taskID int64, userID int64) error {
	ret := _m.Called(ctx, taskID, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, taskID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, projectID
func (_m *TasksRepository) Get(ctx context.Context, projectID int64) ([]*models.Task, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []*models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*models.Task, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*models.Task); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMembers provides a mock function with given fields: ctx, taskID
func (_m *TasksRepository) GetMembers(ctx context.Context, taskID int64) ([]*models.User, error) {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetMembers")
	}

	var r0 []*models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*models.User, error)); ok {
		return rf(ctx, taskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*models.User); ok {
		r0 = rf(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsMember provides a mock function with given fields: ctx, taskID, userID
func (_m *TasksRepository) IsMember(ctx context.Context, taskID int64, userID int64) (bool, error) {
	ret := _m.Called(ctx, taskID, userID)

	if len(ret) == 0 {
		panic("no return value specified for IsMember")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (bool, error)); ok {
		return rf(ctx, taskID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) bool); ok {
		r0 = rf(ctx, taskID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, taskID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields: ctx, taskID, userID
func (_m *TasksRepository) Start(ctx context.Context, taskID int64, userID int64) error {
	ret := _m.Called(ctx, taskID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, taskID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields: ctx, taskID, userID
func (_m *TasksRepository) Stop(ctx context.Context, taskID int64, userID int64) error {
	ret := _m.Called(ctx, taskID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, taskID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, task
func (_m *TasksRepository) Update(ctx context.Context, task *models.Task) (*models.Task, error) {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Task) (*models.Task, error)); ok {
		return rf(ctx, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Task) *models.Task); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTasksRepository creates a new instance of TasksRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTasksRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TasksRepository {
	mock := &TasksRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
