// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/armanokka/test_task_Effective_mobile/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// RedisRepository is an autogenerated mock type for the RedisRepository type
type RedisRepository struct {
	mock.Mock
}

// DeleteProject provides a mock function with given fields: ctx, projectID
func (_m *RedisRepository) DeleteProject(ctx context.Context, projectID int64) error {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, projectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProject provides a mock function with given fields: ctx, projectID
func (_m *RedisRepository) GetProject(ctx context.Context, projectID int64) (*models.Project, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 *models.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.Project, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Project); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetProject provides a mock function with given fields: ctx, project, seconds
func (_m *RedisRepository) SetProject(ctx context.Context, project *models.Project, seconds int64) error {
	ret := _m.Called(ctx, project, seconds)

	if len(ret) == 0 {
		panic("no return value specified for SetProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Project, int64) error); ok {
		r0 = rf(ctx, project, seconds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRedisRepository creates a new instance of RedisRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisRepository {
	mock := &RedisRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
